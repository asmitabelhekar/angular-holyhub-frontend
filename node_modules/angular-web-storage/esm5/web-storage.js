import { __extends } from 'tslib';
import { Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var StorageUtil = /** @class */ (function () {
    function StorageUtil() {
    }
    /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    StorageUtil.get = /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    function (storage, key) {
        var /** @type {?} */ value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    };
    /**
     * @param {?} storage
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    StorageUtil.set = /**
     * @param {?} storage
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    function (storage, key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 't'; }
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    };
    /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    StorageUtil.remove = /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    function (storage, key) {
        storage.removeItem(key);
    };
    /**
     * @param {?} storage
     * @param {?} index
     * @return {?}
     */
    StorageUtil.key = /**
     * @param {?} storage
     * @param {?} index
     * @return {?}
     */
    function (storage, index) {
        return storage.key(index);
    };
    /**
     * @param {?} val
     * @param {?} unit
     * @return {?}
     */
    StorageUtil.getExpired = /**
     * @param {?} val
     * @param {?} unit
     * @return {?}
     */
    function (val, unit) {
        if (val <= 0)
            return 0;
        var /** @type {?} */ now = +new Date();
        switch (unit) {
            case 's':
                // 秒
                return now + 1000 * val;
            case 'm':
                // 分
                return now + 1000 * 60 * val;
            case 'h':
                // 时
                return now + 1000 * 60 * 60 * val;
            case 'd':
                // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w':
                // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y':
                // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't':
                // 自定义
                return now + val;
        }
        return 0;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StorageUtil.stringify = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return JSON.stringify(value);
    };
    /**
     * @param {?} text
     * @return {?}
     */
    StorageUtil.parse = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (/** @type {?} */ e) {
            return text;
        }
    };
    return StorageUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var cache = {};
/**
 * @param {?} storage
 * @param {?} key
 * @param {?=} expiredAt
 * @param {?=} expiredUnit
 * @return {?}
 */
function WebStorage(storage, key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 'd'; }
    return function (target, propertyName) {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: function () {
                return StorageUtil.get(storage, /** @type {?} */ (key));
            },
            set: function (value) {
                if (!cache[/** @type {?} */ (key)]) {
                    var /** @type {?} */ storedValue = StorageUtil.get(storage, /** @type {?} */ (key));
                    if (storedValue === null) {
                        StorageUtil.set(storage, /** @type {?} */ (key), value, expiredAt, expiredUnit);
                    }
                    cache[/** @type {?} */ (key)] = true;
                    return;
                }
                StorageUtil.set(storage, /** @type {?} */ (key), value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * localStorage 装饰器
 *
 * @param {?=} key
 * @param {?=} expiredAt
 * @param {?=} expiredUnit
 * @return {?}
 */
function LocalStorage(key, expiredAt, expiredUnit) {
    if (expiredAt === void 0) { expiredAt = 0; }
    if (expiredUnit === void 0) { expiredUnit = 't'; }
    return WebStorage(localStorage, key, expiredAt, expiredUnit);
}
/**
 * sessionStorage 装饰器
 *
 * @param {?=} key
 * @return {?}
 */
function SessionStorage(key) {
    return WebStorage(sessionStorage, key);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var StorageService = /** @class */ (function () {
    function StorageService(storage) {
        this.storage = storage;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    StorageService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return StorageUtil.get(this.storage, key);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    StorageService.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    function (key, value, expiredAt, expiredUnit) {
        if (expiredAt === void 0) { expiredAt = 0; }
        if (expiredUnit === void 0) { expiredUnit = 'd'; }
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    };
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param {?} key 键名或正则表达式
     * @return {?}
     */
    StorageService.prototype.remove = /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param {?} key 键名或正则表达式
     * @return {?}
     */
    function (key) {
        var _this = this;
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        var /** @type {?} */ index = 0;
        var /** @type {?} */ next = StorageUtil.key(this.storage, index);
        var /** @type {?} */ ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(function (v) { return StorageUtil.remove(_this.storage, v); });
    };
    /**
     * @return {?}
     */
    StorageService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.storage.clear();
    };
    return StorageService;
}());
var LocalStorageService = /** @class */ (function (_super) {
    __extends(LocalStorageService, _super);
    function LocalStorageService() {
        return _super.call(this, localStorage) || this;
    }
    LocalStorageService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalStorageService.ctorParameters = function () { return []; };
    return LocalStorageService;
}(StorageService));
var SessionStorageService = /** @class */ (function (_super) {
    __extends(SessionStorageService, _super);
    function SessionStorageService() {
        return _super.call(this, sessionStorage) || this;
    }
    SessionStorageService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SessionStorageService.ctorParameters = function () { return []; };
    return SessionStorageService;
}(StorageService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AngularWebStorageModule = /** @class */ (function () {
    function AngularWebStorageModule() {
    }
    AngularWebStorageModule.decorators = [
        { type: NgModule, args: [{
                    providers: [LocalStorageService, SessionStorageService],
                },] },
    ];
    return AngularWebStorageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LocalStorage, SessionStorage, StorageService, LocalStorageService, SessionStorageService, AngularWebStorageModule };
//# sourceMappingURL=web-storage.js.map
