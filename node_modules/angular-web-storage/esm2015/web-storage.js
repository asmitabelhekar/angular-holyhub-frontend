import { Injectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StorageUtil {
    /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    static get(storage, key) {
        const /** @type {?} */ value = StorageUtil.parse(storage.getItem(key) || 'null') || null;
        if (value === null)
            return null;
        if (typeof value === 'object' &&
            typeof value._expired !== 'undefined' &&
            value._expired !== 0 &&
            +new Date() > value._expired) {
            StorageUtil.remove(storage, key);
            return null;
        }
        return value._value || null;
    }
    /**
     * @param {?} storage
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    static set(storage, key, value, expiredAt = 0, expiredUnit = 't') {
        storage.setItem(key, StorageUtil.stringify({
            _expired: StorageUtil.getExpired(expiredAt, expiredUnit),
            _value: value,
        }));
    }
    /**
     * @param {?} storage
     * @param {?} key
     * @return {?}
     */
    static remove(storage, key) {
        storage.removeItem(key);
    }
    /**
     * @param {?} storage
     * @param {?} index
     * @return {?}
     */
    static key(storage, index) {
        return storage.key(index);
    }
    /**
     * @param {?} val
     * @param {?} unit
     * @return {?}
     */
    static getExpired(val, unit) {
        if (val <= 0)
            return 0;
        const /** @type {?} */ now = +new Date();
        switch (unit) {
            case 's':
                // 秒
                return now + 1000 * val;
            case 'm':
                // 分
                return now + 1000 * 60 * val;
            case 'h':
                // 时
                return now + 1000 * 60 * 60 * val;
            case 'd':
                // 天
                return now + 1000 * 60 * 60 * 24 * val;
            case 'w':
                // 周
                return now + 1000 * 60 * 60 * 24 * 7 * val;
            case 'y':
                // 年
                return now + 1000 * 60 * 60 * 24 * 365 * val;
            case 't':
                // 自定义
                return now + val;
        }
        return 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static stringify(value) {
        return JSON.stringify(value);
    }
    /**
     * @param {?} text
     * @return {?}
     */
    static parse(text) {
        try {
            return JSON.parse(text) || null;
        }
        catch (/** @type {?} */ e) {
            return text;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const cache = {};
/**
 * @param {?} storage
 * @param {?} key
 * @param {?=} expiredAt
 * @param {?=} expiredUnit
 * @return {?}
 */
function WebStorage(storage, key, expiredAt = 0, expiredUnit = 'd') {
    return (target, propertyName) => {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: () => {
                return StorageUtil.get(storage, /** @type {?} */ (key));
            },
            set: (value) => {
                if (!cache[/** @type {?} */ (key)]) {
                    const /** @type {?} */ storedValue = StorageUtil.get(storage, /** @type {?} */ (key));
                    if (storedValue === null) {
                        StorageUtil.set(storage, /** @type {?} */ (key), value, expiredAt, expiredUnit);
                    }
                    cache[/** @type {?} */ (key)] = true;
                    return;
                }
                StorageUtil.set(storage, /** @type {?} */ (key), value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * localStorage 装饰器
 *
 * @param {?=} key
 * @param {?=} expiredAt
 * @param {?=} expiredUnit
 * @return {?}
 */
function LocalStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(localStorage, key, expiredAt, expiredUnit);
}
/**
 * sessionStorage 装饰器
 *
 * @param {?=} key
 * @return {?}
 */
function SessionStorage(key) {
    return WebStorage(sessionStorage, key);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StorageService {
    /**
     * @param {?} storage
     */
    constructor(storage) {
        this.storage = storage;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return StorageUtil.get(this.storage, key);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} expiredAt
     * @param {?=} expiredUnit
     * @return {?}
     */
    set(key, value, expiredAt = 0, expiredUnit = 'd') {
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    }
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param {?} key 键名或正则表达式
     * @return {?}
     */
    remove(key) {
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        let /** @type {?} */ index = 0;
        let /** @type {?} */ next = StorageUtil.key(this.storage, index);
        const /** @type {?} */ ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(v => StorageUtil.remove(this.storage, v));
    }
    /**
     * @return {?}
     */
    clear() {
        this.storage.clear();
    }
}
class LocalStorageService extends StorageService {
    constructor() {
        super(localStorage);
    }
}
LocalStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LocalStorageService.ctorParameters = () => [];
class SessionStorageService extends StorageService {
    constructor() {
        super(sessionStorage);
    }
}
SessionStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SessionStorageService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularWebStorageModule {
}
AngularWebStorageModule.decorators = [
    { type: NgModule, args: [{
                providers: [LocalStorageService, SessionStorageService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { LocalStorage, SessionStorage, StorageService, LocalStorageService, SessionStorageService, AngularWebStorageModule };
//# sourceMappingURL=web-storage.js.map
